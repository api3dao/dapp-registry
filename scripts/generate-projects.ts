import fs from 'fs';
import path from 'path';
import chokidar from 'chokidar';
import prettier from 'prettier';

const PRETTIER_CONFIG = path.join(__dirname, '../.prettierrc');
const INPUT_DIR = path.join(__dirname, '../projects');
const OUTPUT_DIR = path.join(__dirname, '../src/generated');
const OUTPUT_FILE_TS = `${OUTPUT_DIR}/projects.ts`;
const OUTPUT_FILE_JSON = `${OUTPUT_DIR}/projects-all.json`;

const HEADER_CONTENT = `// ===========================================================================
// DO NOT EDIT THIS FILE MANUALLY!
//
// The contents have been added automatically.
// See: scripts/generate-projects.ts for more information
// ===========================================================================

import { Project } from '../types';
`;

function mergeJsonFiles(): void {
  const fileNames = fs.readdirSync(INPUT_DIR);
  const jsonFiles = fileNames.filter((fileName) => fileName.endsWith('.json'));
  const combinedProjects: any = [];

  for (const jsonFile of jsonFiles) {
    const filePath = path.join(INPUT_DIR, jsonFile);
    const fileContentRaw = fs.readFileSync(filePath, 'utf-8');
    const fileContent = JSON.parse(fileContentRaw);
    combinedProjects.push(fileContent);
  }

  const rawContent = `${HEADER_CONTENT}\nexport const PROJECTS: Project[] = ${JSON.stringify(combinedProjects)};\n\n`;

  const prettierConfig = JSON.parse(fs.readFileSync(PRETTIER_CONFIG, 'utf-8'));
  const formattedContent = prettier.format(rawContent, { parser: 'typescript', ...prettierConfig });

  if (!fs.existsSync(OUTPUT_DIR)) {
    fs.mkdirSync(OUTPUT_DIR);
  }

  fs.writeFileSync(OUTPUT_FILE_TS, formattedContent);
  console.log(`Combined projects (typescript) been saved as ${OUTPUT_FILE_TS}`);

  fs.writeFileSync(OUTPUT_FILE_JSON, JSON.stringify(combinedProjects));
  console.log(`Combined projects (json) been saved as ${OUTPUT_FILE_JSON}`);
}

function watchJsonFiles(): void {
  // ignored: by default we want to ignore dotfiles while watching
  // persistent: continue the process as long as the directory is being watched
  // See: https://github.com/paulmillr/chokidar#api
  const watcher = chokidar.watch([INPUT_DIR], { ignored: /^\./, persistent: true });

  watcher
    .on('add', (path) => {
      console.log(`File ${path} has been added`);
      mergeJsonFiles();
    })
    .on('change', (path) => {
      console.log(`File ${path} has been changed`);
      mergeJsonFiles();
    })
    .on('unlink', (path) => {
      console.log(`File ${path} has been removed`);
      mergeJsonFiles();
    });
}

if (process.argv.includes('--watch')) {
  watchJsonFiles();
} else {
  mergeJsonFiles();
}
